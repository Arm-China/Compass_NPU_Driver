################################################################
#   Arm China Zhouyi NPU Kernel Mode Driver (KMD) Porting Guide
################################################################

1. File Hierarchy
=================
.
|-- porting_guide.txt               -> This porting guide doc.
|-- armchina-npu                    -> ArmChina Zhouyi NPU driver source dir
|   |-- include                     -> API headers
|   |   |-- armchina_aipu.h         -> The header for user space applications
|   |   `-- armchina_aipu_soc.h     -> The header for SoC vendors' integrations
|   |-- Kconfig
|   |-- Makefile
|   |-- aipu.c                      -> Architecture independent implementations
|   |-- aipu_common.c
|   |-- aipu_common.h
|   |-- aipu_io.c
|   |-- aipu_io.h
|   |-- aipu_irq.c
|   |-- aipu_irq.h
|   |-- aipu_job_manager.c
|   |-- aipu_job_manager.h
|   |-- aipu_mm.c
|   |-- aipu_mm.h
|   |-- aipu_dma_buf.c
|   |-- aipu_dma_buf.h
|   |-- aipu_partition.h
|   |-- aipu_priv.c
|   |-- aipu_priv.h
|   |-- aipu_tcb.c
|   |-- aipu_tcb.h
|   |-- config.h
|   |-- zhouyi                      -> Architecture specific implementations
|   |   |-- Makefile
|   |   |-- v1.c                    -> Zhouyi V1 specific
|   |   |-- v1.h
|   |   |-- v2.c                    -> Zhouyi V2 specific
|   |   |-- v2.h
|   |   |-- v12_priv.c              -> Common for Zhouyi V1 & V2
|   |   |-- v3.c                    -> Zhouyi V3 specific
|   |   |-- v3.h
|   |   |-- v3_priv.c
|   |   |-- zhouyi.c                -> Common for Zhouyi architectures
|   |   `-- zhouyi.h
|   |-- default                     -> SoC integration implementation sample (default version)
|   |   |-- Makefile
|   |   `-- default.c
|   `-- r329                        -> SoC integration implementation sample (R329 version)
|       |-- Makefile
|       `-- r329.c
|-- Makefile                        -> KMD makefile (out of tree)
|-- armchina,zhouyi-npu.yaml        -> Linux kernel version DTS bindings
|-- checkpatch.sh                   -> Linux kernel checkpatch script
|-- const_structs.checkpatch
|-- check_patch.pl
|-- spelling.txt
`-- LICENSE.TXT

2. Build NPU KMD
=================
2.1 Build an out-of-tree module
-------------------------------
Before building, you should update the kernel path and toolchain configs in env_setup.sh.
You may build the out-of-tree KMD module with our build_all.sh script:

To build with the default SoC impl.:

    $./build_all.sh -p [juno/6cg]   #juno/6cg using default SoC impl.

If you implement your specific SoC integration instead of using the default samples,

you are suggested to update the build_all.sh and build with

    $./build_all.sh -p [MY_SOC]

The above build commands by default build all the implementations of different Zhouyi architectures.
If you would like to build for a single/compatible Zhouyi architecture(s), try to execute like:

    $./build_all.sh -p MY_SOC -v v1     #build Zhouyi V1 only
    $./build_all.sh -p MY_SOC -v v2     #build Zhouyi V2 compatible version (including Z2/Z3/X1)
    $./build_all.sh -p MY_SOC -v v3     #build Zhouyi V3 only
    $./build_all.sh -p MY_SOC           #build Zhouyi V1/V2/V3 compatible version

2.2 Build in kernel
-------------------
KMD supports to be built in Linux kernel. To build NPU driver in-tree, please follow steps:

    1. copy the ./armchina-npu directory into kernel path: drivers/misc.
    2. add your SoC specific implementations and update NPU driver Kconfig & Makefile:
        drivers/misc/armchina-npu/Kconfig
        drivers/misc/armchina-npu/Makefile
    3. update kernel Kconfig & Makefile:
        (add the following line into drivers/misc/Kconfig)
        source "drivers/misc/armchina-npu/Kconfig"

        (add the following line into drivers/misc/Makefile)
        obj-$(CONFIG_ARMCHINA_NPU)      += armchina-npu/
    4. config NPU driver by executing "make menuconfig ARCH=arm64":
        4.1. if you use Zhouyi V1 NPUs, please select

                "ArmChina NPU architecture: v1"

            to set CONFIG_ARMCHINA_NPU_ARCH_V1. CONFIG_ARMCHINA_NPU will be set
            if you select this config.

        4.2. if you use Zhouyi V2 NPUs (i.e. Z2 or Z3 or X1), please select

                "ArmChina NPU architecture: v2"

            to set CONFIG_ARMCHINA_NPU_ARCH_V2. CONFIG_ARMCHINA_NPU will be set
            if you select this config.

        4.3. if you use Zhouyi V3 NPUs, please select

                "ArmChina NPU architecture: v3"

            to set CONFIG_ARMCHINA_NPU_ARCH_V3. CONFIG_ARMCHINA_NPU will be set
            if you select this config.

        4.4. if you use the default SoC API implementations provided by ArmChina,
             please select

                "Default SoC APIs"

            to set CONFIG_ARMCHINA_NPU_SOC_DEFAULT.

        4.5. if you use the R329 SoC API implementations provided by Allwinner,
             please select

                "R329 SoC APIs"

            to set CONFIG_ARMCHINA_NPU_SOC_R329.

        4.6. if you use your own SoC, please add your corresponding configurations.
    5. build kernel.

The supported Linux kernel version numbers are listed in <9. Compatibility>.

3. Device Tree Source (DTS) Bindings
====================================
To bring-up Zhouyi SDK environment on your SoC chip/board, DTS with Zhouyi AIPU node
should be configured correctly.

3.1. Zhouyi AIPU Attributes
---------------------------
3.1.1 Compatible
----------------
By default, based on the architecture version of the AIPU on your chip,
the value of the compatible attribute should be one of the following strings:

    "armchina,zhouyi-v1"    ->  Zhouyi V1
    "armchina,zhouyi-v2"    ->  Zhouyi V2
    "armchina,zhouyi-v3"    ->  Zhouyi V3
    "armchina,zhouyi"       ->  Zhouyi V1/V2/V3

For example, you may configure for Zhouyi V2 AIPU as:

    /* case 1 */
    /* assume that 0x64000000 is the base address of AIPU registers on your SoC */
    aipu@64000000 {
        compatible = "armchina,zhouyi-v2";
        /* other attributes */
        /* ... */
    };

    or as:

    /* case 2 */
    aipu@64000000 {
        compatible = "armchina,zhouyi";
        /* other attributes */
        /* ... */
    };

This attribute is mandatory.

3.1.2 Core ID
-------------
Zhouyi driver supports mutiple AIPU instances for Zhouyi V1 & V2. You should provide the same
number of aipu nodes as AIPU core instances and specify corresponding core-id attribute in every node.

For example, assume that your SoC contains 2 Zhouyi AIPU cores, you may configure as:

    /* assume that 0x64000000/0x65000000 is the base address of registers of AIPU core #0/#1 */
    aipu0@64000000 {
        compatible = "armchina,zhouyi";
        core-id = <0>;
        /* other attributes of core #0 */
        /* ... */
    };

    aipu1@65000000 {
        compatible = "armchina,zhouyi";
        core-id = <1>;
        /* other attributes of core #1 */
        /* ... */
    };

This attribute is mandatory for V1/V2 multiple instances scenario. For a single core case or V3,
you can omit it.

3.1.3 Register Base
-------------------
Zhouyi driver supports at most two register base addresses:

    > the 1st one represents the base address of external registers of an AIPU core on your SoC;
    > the 2nd one represents the base address of SoC level registers which are related to AIPU;

The 1st one is mandatory for all architectures and the 2nd one is optional according to your SoC specific configurations.

For example, you may configure as followed for different cases:

    /* case 1 */
    /* assume that 0x64000000 is the base address of AIPU registers on your SoC
     * and there is no SoC level AIPU related registers.
     */
    aipu@64000000 {
        compatible = "armchina,zhouyi";
        reg = <0x0 0x64000000 0x0 0x1000>;
        /* other attributes */
        /* ... */
    };

    /* case 2 */
    /* assume that 0x1280010000 is the base address of AIPU registers on your SoC
     * and there is no SoC level AIPU related registers.
     */
    aipu@1280010000 {
        compatible = "armchina,zhouyi";
        reg = <0x12 0x80010000 0x0 0x1000>;
        /* other attributes */
        /* ... */
    };

    /* case 3 */
    /* assume that 0x1280010000 is the base address of AIPU registers on your SoC
     * and 0x12C0010000 is the base address of your SoC level AIPU related registers.
     */
    aipu@1280010000 {
        compatible = "armchina,zhouyi";
        reg = <0x12 0x80010000 0x0 0x1000>,
              <0x12 0xC0010000 0x0 0x80>;
        /* other attributes */
        /* ... */
    };

3.1.4 Memory Region
-------------------
AIPU driver supports Arm SMMU to virtualize addresses for AIPU. If without a SMMU, SoC vendor should
reserve memory region for host and AIPU core(s) to access as workspaces.

AIPU driver supports to reserve three types of memory region:

    Types       H/W
    ------------------------
    *memory* -> DDR
    *sram*   -> SoC SRAM
    *dtcm*   -> SoC SRAM/DDR

The reserved memory region node name in DTS should be exactly "memory", "sram", or "dtcm"; otherwise
driver will be failed in probing.

For *memory* or *sram* type, you can reserve one or mutiple region(s) for it. We limit the maximum count of
regions to be reserved to be 32 because Linux kernel accepts 64 at maximum.

For *dtcm* type, currently we only accept to reserve at maximum one region. If you would like to reserve
an address in SRAM or memory to be used as a DTCM region, please use the *dtcm* type. *dtcm* type only works
for V2 (X1) and V3.

The regions can be reserved in any sequence.

An example:

    reserved-memory {
        #address-cells = <2>;
        #size-cells = <2>;
        ranges;

        aipu_res_0: memory@A0000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x0 0xA0000000 0x0 0x10000000>;
        };

        aipu_res_1: dtcm@C0000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x0 0xC0000000 0x0 0x800000>;
        };

        aipu_res_2: sram@C0800000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x0 0xC0800000 0x0 0x400000>;
        };

        aipu_res_3: sram@C1000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x0 0xC1000000 0x0 0x800000>;
        };

        aipu_res_4: memory@B0000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x0 0xB0000000 0x0 0x10000000>;
        };
    };

    aipu0@64000000 {
        /* other attributes */
        memory-region = <&aipu_res_0 &aipu_res_1 &aipu_res_2 &aipu_res_3 &aipu_res_4>;
    };

3.1.4.1 Without A SMMU
----------------------
Memory region(s) should be reserved for this scenario. To put it specifically, SoC vendor may choose to
make AIPU share the same region with other devices or monopolize it, to reserve in a DMA way or in a
CMA way. Those memory reservation methods result in different system memory management in Linux and
AIPU uses those addresses with no difference.

As given in Zhouyi V1 ~ V3 specification, the valid address space AIPU could use is within
[0x0, 0x100000000). To avoid touching the reserved regions, AIPU driver furtherly restricts the memory
region reserved/allocated for AIPU:

    > For Zhouyi V1: within [0x0, 0xC0000000);
    > For Zhouyi V2: lower 32 bits address within [0x0, 0xC0000000); no limits for higher 32 bits;
    > For Zhouyi V3: lower 32 bits address within [0x0, 0xE0000000); no limits for higher 32 bits;

Note that how many bytes to reserve depends on your target application scenario. The following values
to reserve are just for the purpose of usage demo. For example,

    /* case 1 */
    /* reserve 256MB via DMA pool */
    reserved-memory {
        #address-cells = <2>;
        #size-cells = <2>;
        ranges;

        aipu_res_0: memory@1000000000 {
            compatible = "shared-dma-pool";
            no-map;
            reg = <0x10 0x00000000 0x0 0x10000000>;
        };
    };

    /* case 2 */
    /* reserve 256MB via CMA pool and do not share with other devices */
    reserved-memory {
        #address-cells = <2>;
        #size-cells = <2>;
        ranges;

        aipu_res_0: memory@1000000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x10 0x00000000 0x0 0x10000000>;
        };
    };

Reference the reserved region in an aipu node:

    aipu@1280010000 {
            compatible = "armchina,zhouyi";
            memory-region = <&aipu_res_0>;
            /* other attributes */
            /* ... */
    };

For multiple instances scenario, AIPU cores may share the same memory region and the reserved region
can be referenced in only one AIPU node.

This attribute is mandatory if AIPU is not behind a SMMU.

3.1.4.2 With A SMMU
-------------------
When a SMMU presents, AIPU uses IOVAs instead of pure device DMA addresses. Those IOVAs are mapped from
system managed physically discontiguous regions, or from a physically contiguous DMA region if there is
a DMA/CMA reservation at the same time.

Currently, AIPU driver supports SMMU-401. You may bind it as followed:

    smmu401: smmu@12C0100000 {
        compatible = "arm,mmu-401";
        reg = <0x12 0xC0100000 0x0 0x10000>;
        #iommu-cells = <1>;
        status = "okay";
        #global-interrupts = <1>;
        interrupt-parent = <&gic>;
        interrupts = <0 90 1>,
            <0 90 1>, <0 90 1>, <0 90 1>, <0 90 1>,
            <0 90 1>, <0 90 1>, <0 90 1>, <0 90 1>,
            <0 90 1>, <0 90 1>, <0 90 1>, <0 90 1>,
            <0 90 1>, <0 90 1>, <0 90 1>, <0 90 1>;
    };

    aipu@1280010000 {
        compatible = "armchina,zhouyi";
        iommus = <&smmu401 0x0>;
        /* other attributes */
        /* ... */
    };

To use a physically contiguous DMA region behind, you may reserve it as followed:

    aipu@1280010000 {
        compatible = "armchina,zhouyi";
        memory-region = <&aipu_res_0>;
        iommus = <&smmu401 0x0>;
        /* other attributes */
        /* ... */
    };

3.1.4.3 SoC SRAM
----------------
SoC SRAM is optional for Zhouyi. Zhouyi driver supports to configure SoC SRAM for AIPU to consume as
feature map reuse buffers.

Please find the example in 3.1.4.

If host CPUs on your SoC have no access to a SRAM region (but your NPUs have), it is unnecessary to
reserve a SRAM region in DTS. If you still do this, please ensure that the following macro is set to
be 0:

    in armchina-aipu/config.h: AIPU_CONFIG_HOST_MAP_SRAM

By default, this macro is 0. You should set 1 if your CPUs also have access to SRAM and you wish to enable
the sram management by driver. If set, driver will map the address to virtual space and sram allocations
from userspace will be enabled.

3.1.4.4 DTCM
------------
AIPU Data Tightly Coupled Memory (DTCM) is an address space for high-speed accessing (like SRAM) on
Zhouyi V2 (X1) or V3. Zhouyi V2 (X1) or V3 SoC vendor may provide a DTCM region to speedup the model inference.

If DTCM is configured, the size of it should be a value within a list (spec requires):

    {512KB, 1MB, 2MB, 3MB, ..., 31MB, 32MB}

DTCM region is optional for V2 (X1) or V3. Please find the example in 3.1.4.

If host CPUs on your SoC have no access to a DTCM region (but your NPUs have), it is still necessary to
reserve a DTCM region in DTS because driver should configure the reserved DTCM address in the NPU register.
In this case, please ensure that the following macro is set to be 0:

    in armchina-aipu/config.h: AIPU_CONFIG_HOST_MAP_DTCM

By default, this macro is 0. You should set 1 if your CPUs also have access to DTCM and you wish to enable
the dtcm management by driver. If set, driver will map the address to virtual space and dtcm allocations
from userspace will be enabled.

3.1.4.5 dma-ranges
------------------
Sometimes to access the main memory, the physical addresses (cpu_pa) issued from host CPU and the
addresses used by a device (dma_addr) do not equal. For this scenario, we use the dma-ranges
attribute to describe the gap between them.

You must specify this attribute in a reserved memory region node if this offset != 0.

The host-aipu-offset attribute we used before will not be used in this version KMD driver.

For example, if for the same memory space, dma_addr = cpu_pa - 0x80000000, you may configure as
followed:

    /* case 1 */
    /* cpu_pa space = dma_addr space = [0xA0000000, 0xB0000000) */
    /* do not need to specify dma-ranges */
    reserved-memory {
        #address-cells = <2>;
        #size-cells = <2>;
        ranges;

        aipu_res_0: memory@A0000000 {
            compatible = "shared-dma-pool";
            no-map;
            reg = <0x0 0xA0000000 0x0 0x10000000>;
        };
    };

    /* case 2 */
    /* cpu_pa space = [0xA0000000, 0xB0000000), dma_addr space = [0x20000000, 0x30000000) */
    /* you shall specify dma-ranges */
    reserved-memory {
        #address-cells = <2>;
        #size-cells = <2>;
        ranges;

        aipu_res_0: memory@A0000000 {
            compatible = "shared-dma-pool";
            no-map;
            reg = <0x0 0xA0000000 0x0 0x10000000>;
        };
    };

    aipu0@64000000 {
        #address-cells = <2>;
        #size-cells = <1>;

        compatible = "armchina,zhouyi";
        memory-region=<&aipu_res_0>;
        dma-ranges=<0x0 0x20000000 0x0 0xA0000000 0x10000000>;

        /* other attributes... */
    };

This attribute is optional and by default this value in driver is 0 if not activated in DTS.

3.1.5 ASID Region Base & Size
-----------------------------
Zhouyi V2 & V3 NPUs support 4 groups of ASID regions, which are used to direct different types
of data to different address spaces. The base addresses and size of the 4 ASID regions should be
configured in NPU device tree.

For the n^th ASE region, the addresses used to access the system memory are calculated as:

        ASID_n: PA_64 = ASE_n_64 + VA_32

    where:
        PA_64 is a 64 bits physical address used to access the system memory finally
        n is the id of ASE, i.e. ASID, 0 <= n <= 3
        ASE_n_64 is a 64 bits base address configured in the ASE register #n and used to
            extend the address space of NPU
        VA_32 is a 32 bits virtual address configured in external registers or rodata sections
            and used in NPU

NPU driver will link the ASID regions to the corresponding reserved memory regions (if any).

This attribute is optional. If not set, the NPU driver will choose a shared base address for
all the ASID regions.

If you have reserved memory region(s), please configure the ASID in the reserved memory node as:

    asid = <id_0 id_1 id_2 id_3>; /* variable array contains the id(s) this mem region supports */

For example,

    /* case 1 */
    /* all ASID regions share one base address & size */
    reserved-memory {
        #address-cells = <2>;
        #size-cells = <2>;
        ranges;

        aipu_res_0: memory@A0000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x0 0xA0000000 0x0 0x10000000>;
            asid = <0 1 2 3>;
        };
    };

    aipu0@64000000 {
        /* other attributes */
        memory-region = <&aipu_res_0>;
    };

    /* case 2 */
    /* 4 ASID regions have different addresses, respectively */
    reserved-memory {
        #address-cells = <2>;
        #size-cells = <2>;
        ranges;

        aipu_res_0: memory@A0000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x0 0xA0000000 0x0 0x20000000>;
            asid = <0>;
        };

        aipu_res_1: memory@1A0000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x1 0xA0000000 0x0 0x20000000>;
            asid = <1>;
        };

        aipu_res_2: memory@2A0000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x2 0xA0000000 0x0 0x20000000>;
            asid = <2>;
        };

        aipu_res_3: memory@3A0000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x3 0xA0000000 0x0 0x20000000>;
            asid = <3>;
        };
    };

    aipu0@64000000 {
        /* other attributes */
        memory-region = <&aipu_res_0 &aipu_res_1 &aipu_res_2 &aipu_res_3 &aipu_res_4>;
    };

    /* case 4 */
    /* no asid attributes specified, default asid is choosed */
    reserved-memory {
        #address-cells = <2>;
        #size-cells = <2>;
        ranges;

        aipu_res_0: memory@A0000000 {
            compatible = "shared-dma-pool";
            reusable;
            reg = <0x0 0xA0000000 0x0 0x8000000>;
            /* by default support all ASIDs */
        };
    };

    aipu0@64000000 {
        /* other attributes */
        memory-region = <&aipu_res_0>;
    };

3.1.6 Interrupts
----------------
Interrupt numbers and the trigger types should be specified as followed:

    /* case 1 */
    aipu@64000000 {
        compatible = "armchina,zhouyi";
        interrupts = <0 168 IRQ_TYPE_EDGE_RISING>;
        /* other attributes */
        /* ... */
    };

    /* case 2 */
    aipu@1281010000 {
        compatible = "armchina,zhouyi";
        interrupt-parent = <&gic>;
        interrupts = <0 90 1>;
        /* other attributes */
        /* ... */
    };

Shared IRQ number is allowed. AIPU interrupt handler returns IRQ_NONE immediately
if the incoming interrupt is from another device.

This attribute is mandatory in all cases.

3.1.7 Cluster-Partition Pair
----------------------------
Zhouyi V3 hardware is organized in such architecture: partition > cluster > core > TEC.
Driver should configure the partition number and cluster info. in each partition.

We use the cluster-partition pair in DTS to specify their relationships:

    cluster-partition = <cluster_id_1 partition_id_i>, <cluster_id_2 partition_id_j>,
                        <cluster_id_3 partition_id_k>, ..., <cluster_id_n partition_id_w>;

which means that there are 4 clusters in all and you:

    configure cluster_1 into partition_i;
    configure cluster_2 into partition_j;
    configure cluster_3 into partition_k;
    configure cluster_4 into partition_w;

where i, j, k, w can be the same or different with each other, depending on your decision and
the maximum partition count.

You should notice that:

    1. the configured partition count should be <= the maximum count allowed by your AIPU h/w arch.;
    2. one cluster should be configured into one and only one partition;
    3. one partition can hold one single cluster or multiple ones;
    4. the cluster-partition relation cannot be changed at runtime after configured by DTS;
    5. the cluster_id and partition_id should be a uint32 number;

For example, if the AIPU on your system has only one cluster, you can configure as:

    /* case 1 */
    aipu@64000000 {
        compatible = "armchina,zhouyi";
        cluster-partition = <0 0>;
        /* other attributes */
        /* ... */
    };

This attribute is mandatory for V3. For other architectures, you can omit it.

3.1.8 GM-Policy
---------------
In Zhouyi V3, every AIPU cluster has a General Memory (GM) region caching the address of
frequently updated data.

We allow AIPU users to configure the usage policy of this region:

    [policy 1] shared by tasks of all QoS level in the cluster
    [policy 2] divided half-by-half: one for tasks of QoS slow, another for tasks of QoS fast

You should set this attribute as:

    /* policy 1 */
    aipu@64000000 {
        compatible = "armchina,zhouyi";
        gm-policy = <1>;
        /* other attributes */
        /* ... */
    };

    /* policy 2 */
    aipu@64000000 {
        compatible = "armchina,zhouyi";
        gm-policy = <2>;
        /* other attributes */
        /* ... */
    };

If you do not set this attribute, by default driver will adopt policy 1. For AIPU architectures
without GM feature, this attribute will be omitted.

4. Implement Specific SoC Operations
====================================
If you would like to implement the probing interfaces for your own specific SoC *MY_SOC*,
create ./MY_SOC/MY_SOC.c and implement the interfaces defined in armchina_aipu_soc.h. The clock
or power configurations for AIPU of your SoC can be added.

Note that your MY_SOC_probe()/MY_SOC_remove() implementations should call
armchina_aipu_probe()/armchina_aipu_remove(), respectively.

5. Soft-reset Configurations
============================
5.1 Zhouyi V1 and V2 (Z2/Z3)
----------------------------
Zhouyi V1 and some V2 NPUs (i.e. Z2 and Z3) do not support soft reset function itself.
SoC vendors should add this feature in SoC level and provide a reset related register externally
for driver to use.

Zhouyi driver reserve a group of interfaces for you to integrate NPU reset function. Please
follow these steps to bring up this feature:

    1. implement reset/clock gating function in SoC hardware and provide a control register;
    2. configure the reset control register address into NPU devicetree file (for details
       please read <3.1.3 Register base>);
    3. implement a second platform_get_resource() for the SoC reset control register
       in the driver probe phase (suggested after the 1st platform_get_resource for NPU registers);
    4. implement the enable_clk()/disable_clk() interfaces defined in aipu_soc_operations, or
       implement your own reset interfaces and add them into aipu_soc_operations; in the above
       implementations, configure the reset control register you defined and obtained in step 1~3;
    5. pass the aipu_soc_operations struct you defined to the probe function and call the reset
       function in your desired positions (you may refer to default/default.c); generally, you should
       reset the NPU if a runtime error/exception occurs;

5.2 Zhouyi V2 (X1)
------------------
Zhouyi X1 NPUs support soft reset function. Host CPU can trigger a soft reset operation by
configuring external register: Soft Reset Reister (0x200). You can find the speficication
of this register in the Zhouyi X1 NPU TRM doc.

By default, Zhouyi NPU driver has implemented this feature. The soft reset should be triggered in
the following situations:

    1. insmod/rmmod Zhouyi KMD;
    2. a runtime exception/fault occurs in a NPU job;
    3. user triggered by configuring the sysfs interface (for debug usage);

You may also add your specific implementations about soft reset.

5.3 Zhouyi V3
-------------
Zhouyi V3 NPUs support soft reset function. Host CPU can trigger a soft reset operation by
configuring external register: TSM Soft Reset Register (0x20). You can find the speficication
of this register in the Zhouyi V3 NPU TRM doc.

Please be noted that a command pool abortion command will result in a soft reset internally
as well. You should try to use command pool abortion first rather than to use soft reset directly.

By default, Zhouyi NPU driver has implemented this feature. The soft reset should be triggered in
the following situations:

    1. insmod/rmmod Zhouyi KMD (reset the whole NPUs);
    2. a runtime error/exception signal occurs in an NPU job (abort the command pool);

You may also add your specific implementations about soft reset.

5.4 Soft-reset Delay time
-------------------------
For Zhouyi V2 (X1), you may configure AIPU_CONFIG_DEFAULT_RESET_DELAY_US in ./armchina-npu/config.h
to set the soft-reset delay time. When a soft-reset is triggered, driver will check the hardware
status after this time delay since the reset happens. If the status is abnormal, driver will report
error and stop to schedule tasks. By default this delay value is 50us.

This feature only works for V2 (X1) or V3.

6. Sysfs Debug Interfaces
=========================
Zhouyi driver supports sysfs interfaces for user space to track the status of AIPU. After insmoding
AIPU ko, assume the base addr of your AIPU registers is 0x64000000, you may find the AIPU sysfs
directory:

    /sys/devices/platform/64000000.aipu0

For multi-instances, you may find more sub-directories like:

    /sys/devices/platform/65000000.aipu1
    /sys/devices/platform/66000000.aipu2
    /sys/devices/platform/67000000.aipu3

You can read/write the corresponding sysfs attributes of a core according to your SoC configurations.

6.1 External Registers
----------------------
You can always read/write to AIPU external registers as long as AIPU is not in power-off or
clock-gating states. Note that some registers are specific of an AIPU architecture and not common
ones of Zhouyi, and some registers are read-only for host to access. Make sure to read/write to the
correct registers with corresponding permissions. In most cases you shall not directly write the
external registers via sysfs, unless you are debugging issues or testing something.

To read the current values in external registers of AIPU core #0, execute:

    $cat /sys/devices/platform/64000000.aipu0/ext_registers

Then you can find the values be printed on screen like:

    ----------------------------------------
    AIPU Core0 External Register Values
    ----------------------------------------
    Offset  Name                  Value
    ----------------------------------------
    0x0     Ctrl Reg              0x0000000f
    0x4     Status Reg            0x00050000
    0x8     Start PC Reg          0x2000000c
    0xc     Intr PC Reg           0x20000010
    0x10    IPI Ctrl Reg          0x00000000
    0x14    Data Addr 0 Reg       0x2107b000
    0x18    Data Addr 1 Reg       0x21094000
    0x1c    Data Addr 2 Reg       0x00000000
    0x20    Data Addr 3 Reg       0x00000000
    0xc0    ASE0 Ctrl Reg         0xc0010000
    0xc4    ASE0 High Base Reg    0x00000000
    0xc8    ASE0 Low Base Reg     0x00000000
    0xcc    ASE1 Ctrl Reg         0x80010000
    0xd0    ASE1 High Base Reg    0x00000000
    0xd4    ASE1 Low Base Reg     0x00000000
    0xd8    ASE2 Ctrl Reg         0x00000000
    0xdc    ASE2 High Base Reg    0x00000000
    0xe0    ASE2 Low Base Reg     0x00000000
    0xe4    ASE3 Ctrl Reg         0x00000000
    0xe8    ASE3 High Base Reg    0x00000000
    0xec    ASE3 Low Base Reg     0x00000000
    0x180   DTCM Ctrl Reg         0x00000001
    0x184   DTCM High Base Reg    0x00000000
    0x188   DTCM Low Base Reg     0x00000000
    0x200   Soft Reset Reg        0x00000002
    ----------------------------------------

To write values into a register, you should follow the following format:

    $echo <reg_offset>-<write_time>-<write_value> > /sys/devices/platform/64000000.aipu0/ext_registers

where:
    <reg_offset>  is the offset of a register you would like to write
    <write_time>  is how many time you would like to do the write operation
    <write_value> is the real value you would like to configure

For example, to write Data Address 0 Register (offset 0x14) with 0x1000, just execute:

    $echo 0x14-1-0x1000 > /sys/devices/platform/64000000.aipu0/ext_registers

to do soft-reset on Zhouyi X1, execute:

    $echo 0x200-1-0x1 > /sys/devices/platform/64000000.aipu0/ext_registers

Please do not configure external registers when there are unfinished inferencing tasks. This may
result in undefined behaviors.

6.2 Clock
---------
If you have defined SoC level clock related methods in *struct aipu_soc_operations* and register the
struct in your probe function, you may find a clock operating interface under sysfs directory.

To read the clock state, execute:

    $cat /sys/devices/platform/64000000.aipu0/soc_clock

then corresponding logs will be printed on screen:

    "AIPU is in clock gating state and suspended."
    "AIPU is in normal working state."

To do clocking gating/resume, execute the following commands respectively:

    $echo 1 > /sys/devices/platform/64000000.aipu0/soc_clock       #suspend
    $echo 0 > /sys/devices/platform/64000000.aipu0/soc_clock       #resume

This feature only works for V1/V2.

6.3 Disable A Core
------------------
You can soft-disable an AIPU core to prevent scheduling of jobs to it.

To check if AIPU core #0 is under disabled state, execute:

    $cat /sys/devices/platform/64000000.aipu0/disable

then corresponding logs will be printed on screen:

    "AIPU core #0 is enabled."
    "AIPU core #0 is disabled."

To disbale/enable AIPU core #0, execute:

    $echo 1 > /sys/devices/platform/64000000.aipu0/disable      #disable
    $echo 0 > /sys/devices/platform/64000000.aipu0/disable      #enable

This feature only works for V1/V2.

7. User Space Driver (UMD)
==========================
To ensure that your tasks are scheduled and executed correctly, you shall use the exact UMD and KMD
in the same package we released to you. For specification of UMD, please refer to the Zhouyi Software
Programming Guide (Chapter of Driver).

8. Coding Style
===============
To check the coding style of Zhouyi NPU KMD, you can execute:

    $./check_patch.sh

This script uses Linux kernel checkpatch scripts.

9. Compatibility
================
Zhouyi NPU KMD supports Linux kernel version from 4.x to 5.x. Specifically, we tested the code on
the following Linux kernel versions:

    4.9.51
    4.9.168
    5.4.66
    5.10.5
    5.11.18
    5.12.8
    5.13.8
    5.14.6
    5.15.5

If you find that KMD has compatibility issues with any kernel version (> 4.9.0), please contact us
and report the issues. Thanks.

10. License
===========
GNU GPL v2
